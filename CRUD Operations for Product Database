// =============================================
// Product Management System using Node.js + Express + MongoDB (Mongoose)
// Official References:
// Node.js Docs: https://nodejs.org/en/docs
// Express Docs: https://expressjs.com/
// Mongoose Docs: https://mongoosejs.com/docs/
// =============================================

const express = require("express");
const mongoose = require("mongoose");

// 1️⃣ Connect to MongoDB
mongoose.connect("mongodb://localhost:27017/productDB", {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("✅ MongoDB Connected Successfully"))
.catch(err => console.error("❌ MongoDB Connection Error:", err));

// 2️⃣ Define Product Schema and Model
const productSchema = new mongoose.Schema({
  name: { type: String, required: [true, "Product name is required"], trim: true },
  price: { type: Number, required: [true, "Product price is required"], min: [0, "Price must be positive"] },
  category: { type: String, required: [true, "Product category is required"] }
}, { timestamps: true });

const Product = mongoose.model("Product", productSchema);

// 3️⃣ Initialize Express App
const app = express();
app.use(express.json()); // Middleware to parse JSON request body

// 4️⃣ CRUD Operations for Products

// ➕ Create (Add New Product)
app.post("/api/products", async (req, res) => {
  try {
    const product = await Product.create(req.body);
    res.status(201).json({ message: "✅ Product added successfully", product });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// 📖 Read (Get All Products)
app.get("/api/products", async (req, res) => {
  try {
    const products = await Product.find();
    res.status(200).json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 🔍 Read (Get Product by ID)
app.get("/api/products/:id", async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product) return res.status(404).json({ message: "Product not found" });
    res.status(200).json(product);
  } catch (err) {
    res.status(500).json({ error: "Invalid Product ID" });
  }
});

// ✏️ Update (Modify Product by ID)
app.put("/api/products/:id", async (req, res) => {
  try {
    const product = await Product.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!product) return res.status(404).json({ message: "Product not found" });
    res.status(200).json({ message: "✅ Product updated successfully", product });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// ❌ Delete (Remove Product by ID)
app.delete("/api/products/:id", async (req, res) => {
  try {
    const product = await Product.findByIdAndDelete(req.params.id);
    if (!product) return res.status(404).json({ message: "Product not found" });
    res.status(200).json({ message: "🗑️ Product deleted successfully" });
  } catch (err) {
    res.status(500).json({ error: "Invalid Product ID" });
  }
});

// 🌐 Root Route
app.get("/", (req, res) => {
  res.send("🛒 Welcome to the Product Management API");
});

// 🚀 Start Server
const PORT = 5000;
app.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));
