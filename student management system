// =============================================
// Student Management System using Node.js + Express + MongoDB (Mongoose)
// Official References:
// Node.js Docs: https://nodejs.org/en/docs
// Express Docs: https://expressjs.com/
// Mongoose Docs: https://mongoosejs.com/docs/
// =============================================

const express = require("express");
const mongoose = require("mongoose");

// 1️⃣ Connect to MongoDB
mongoose.connect("mongodb://localhost:27017/studentDB", {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("✅ MongoDB Connected Successfully"))
.catch(err => console.error("❌ MongoDB Connection Error:", err));

// 2️⃣ Create Student Schema & Model
const studentSchema = new mongoose.Schema({
  name: { type: String, required: true, trim: true },
  age: { type: Number, required: true, min: 5 },
  course: { type: String, required: true }
}, { timestamps: true });

const Student = mongoose.model("Student", studentSchema);

// 3️⃣ Initialize Express App
const app = express();
app.use(express.json()); // parse JSON requests

// 4️⃣ CRUD Operations

// ➕ Create Student
app.post("/api/students", async (req, res) => {
  try {
    const student = await Student.create(req.body);
    res.status(201).json({ message: "Student created successfully", student });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// 📖 Get All Students
app.get("/api/students", async (req, res) => {
  try {
    const students = await Student.find();
    res.status(200).json(students);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 🔍 Get Student by ID
app.get("/api/students/:id", async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) return res.status(404).json({ message: "Student not found" });
    res.status(200).json(student);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ✏️ Update Student
app.put("/api/students/:id", async (req, res) => {
  try {
    const student = await Student.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true
    });
    if (!student) return res.status(404).json({ message: "Student not found" });
    res.status(200).json({ message: "Student updated successfully", student });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// ❌ Delete Student
app.delete("/api/students/:id", async (req, res) => {
  try {
    const student = await Student.findByIdAndDelete(req.params.id);
    if (!student) return res.status(404).json({ message: "Student not found" });
    res.status(200).json({ message: "Student deleted successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 🌐 Default Route
app.get("/", (req, res) => {
  res.send("🎓 Welcome to the Student Management API");
});

// 🚀 Start Server
const PORT = 5000;
app.listen(PORT, () => console.log(`🚀 Server running on http://localhost:${PORT}`));
